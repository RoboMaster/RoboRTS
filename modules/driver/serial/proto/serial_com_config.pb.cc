// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serial_com_config.proto

#include "serial_com_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace rrts {
namespace driver {
namespace serial {
class SerialPortConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SerialPortConfig>
      _instance;
} _SerialPortConfig_default_instance_;
}  // namespace serial
}  // namespace driver
}  // namespace rrts
namespace protobuf_serial_5fcom_5fconfig_2eproto {
void InitDefaultsSerialPortConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::rrts::driver::serial::SerialPortConfig::_default_parity_.DefaultConstruct();
  *::rrts::driver::serial::SerialPortConfig::_default_parity_.get_mutable() = ::std::string("N", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::rrts::driver::serial::SerialPortConfig::_default_parity_.get_mutable());
  {
    void* ptr = &::rrts::driver::serial::_SerialPortConfig_default_instance_;
    new (ptr) ::rrts::driver::serial::SerialPortConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rrts::driver::serial::SerialPortConfig::InitAsDefaultInstance();
}

void InitDefaultsSerialPortConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSerialPortConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, serial_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, serial_boudrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, flow_control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, databits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, stopbits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, parity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::rrts::driver::serial::SerialPortConfig, is_debug_),
  0,
  2,
  3,
  5,
  6,
  1,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::rrts::driver::serial::SerialPortConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rrts::driver::serial::_SerialPortConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "serial_com_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027serial_com_config.proto\022\022rrts.driver.s"
      "erial\"\256\001\n\020SerialPortConfig\022\023\n\013serial_por"
      "t\030\001 \002(\t\022\027\n\017serial_boudrate\030\002 \002(\005\022\027\n\014flow"
      "_control\030\003 \001(\005:\0010\022\023\n\010databits\030\004 \001(\005:\0018\022\023"
      "\n\010stopbits\030\005 \001(\005:\0011\022\021\n\006parity\030\006 \001(\t:\001N\022\026"
      "\n\010is_debug\030\007 \001(\010:\004true"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serial_com_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_serial_5fcom_5fconfig_2eproto
namespace rrts {
namespace driver {
namespace serial {

// ===================================================================

void SerialPortConfig::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SerialPortConfig::_default_parity_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerialPortConfig::kSerialPortFieldNumber;
const int SerialPortConfig::kSerialBoudrateFieldNumber;
const int SerialPortConfig::kFlowControlFieldNumber;
const int SerialPortConfig::kDatabitsFieldNumber;
const int SerialPortConfig::kStopbitsFieldNumber;
const int SerialPortConfig::kParityFieldNumber;
const int SerialPortConfig::kIsDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerialPortConfig::SerialPortConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_serial_5fcom_5fconfig_2eproto::InitDefaultsSerialPortConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rrts.driver.serial.SerialPortConfig)
}
SerialPortConfig::SerialPortConfig(const SerialPortConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_port()) {
    serial_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_port_);
  }
  parity_.UnsafeSetDefault(&::rrts::driver::serial::SerialPortConfig::_default_parity_.get());
  if (from.has_parity()) {
    parity_.AssignWithDefault(&::rrts::driver::serial::SerialPortConfig::_default_parity_.get(), from.parity_);
  }
  ::memcpy(&serial_boudrate_, &from.serial_boudrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&stopbits_) -
    reinterpret_cast<char*>(&serial_boudrate_)) + sizeof(stopbits_));
  // @@protoc_insertion_point(copy_constructor:rrts.driver.serial.SerialPortConfig)
}

void SerialPortConfig::SharedCtor() {
  _cached_size_ = 0;
  serial_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parity_.UnsafeSetDefault(&::rrts::driver::serial::SerialPortConfig::_default_parity_.get());
  ::memset(&serial_boudrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flow_control_) -
      reinterpret_cast<char*>(&serial_boudrate_)) + sizeof(flow_control_));
  is_debug_ = true;
  databits_ = 8;
  stopbits_ = 1;
}

SerialPortConfig::~SerialPortConfig() {
  // @@protoc_insertion_point(destructor:rrts.driver.serial.SerialPortConfig)
  SharedDtor();
}

void SerialPortConfig::SharedDtor() {
  serial_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parity_.DestroyNoArena(&::rrts::driver::serial::SerialPortConfig::_default_parity_.get());
}

void SerialPortConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerialPortConfig::descriptor() {
  ::protobuf_serial_5fcom_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serial_5fcom_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerialPortConfig& SerialPortConfig::default_instance() {
  ::protobuf_serial_5fcom_5fconfig_2eproto::InitDefaultsSerialPortConfig();
  return *internal_default_instance();
}


void SerialPortConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rrts.driver.serial.SerialPortConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serial_port_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      serial_port_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!parity_.IsDefault(&::rrts::driver::serial::SerialPortConfig::_default_parity_.get()));
      parity_.UnsafeMutablePointer()->assign(*&::rrts::driver::serial::SerialPortConfig::_default_parity_.get());
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&serial_boudrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flow_control_) -
        reinterpret_cast<char*>(&serial_boudrate_)) + sizeof(flow_control_));
    is_debug_ = true;
    databits_ = 8;
    stopbits_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerialPortConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rrts.driver.serial.SerialPortConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serial_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_port().data(), static_cast<int>(this->serial_port().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rrts.driver.serial.SerialPortConfig.serial_port");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 serial_boudrate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_serial_boudrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_boudrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flow_control = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flow_control();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flow_control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 databits = 4 [default = 8];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_databits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &databits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stopbits = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_stopbits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stopbits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parity = 6 [default = "N"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parity().data(), static_cast<int>(this->parity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rrts.driver.serial.SerialPortConfig.parity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_debug = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_debug();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debug_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rrts.driver.serial.SerialPortConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rrts.driver.serial.SerialPortConfig)
  return false;
#undef DO_
}

void SerialPortConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rrts.driver.serial.SerialPortConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serial_port = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_port().data(), static_cast<int>(this->serial_port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rrts.driver.serial.SerialPortConfig.serial_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_port(), output);
  }

  // required int32 serial_boudrate = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serial_boudrate(), output);
  }

  // optional int32 flow_control = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flow_control(), output);
  }

  // optional int32 databits = 4 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->databits(), output);
  }

  // optional int32 stopbits = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stopbits(), output);
  }

  // optional string parity = 6 [default = "N"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parity().data(), static_cast<int>(this->parity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rrts.driver.serial.SerialPortConfig.parity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->parity(), output);
  }

  // optional bool is_debug = 7 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rrts.driver.serial.SerialPortConfig)
}

::google::protobuf::uint8* SerialPortConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rrts.driver.serial.SerialPortConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serial_port = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_port().data(), static_cast<int>(this->serial_port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rrts.driver.serial.SerialPortConfig.serial_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_port(), target);
  }

  // required int32 serial_boudrate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serial_boudrate(), target);
  }

  // optional int32 flow_control = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flow_control(), target);
  }

  // optional int32 databits = 4 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->databits(), target);
  }

  // optional int32 stopbits = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stopbits(), target);
  }

  // optional string parity = 6 [default = "N"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parity().data(), static_cast<int>(this->parity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rrts.driver.serial.SerialPortConfig.parity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->parity(), target);
  }

  // optional bool is_debug = 7 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rrts.driver.serial.SerialPortConfig)
  return target;
}

size_t SerialPortConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rrts.driver.serial.SerialPortConfig)
  size_t total_size = 0;

  if (has_serial_port()) {
    // required string serial_port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_port());
  }

  if (has_serial_boudrate()) {
    // required int32 serial_boudrate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial_boudrate());
  }

  return total_size;
}
size_t SerialPortConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rrts.driver.serial.SerialPortConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string serial_port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_port());

    // required int32 serial_boudrate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial_boudrate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string parity = 6 [default = "N"];
  if (has_parity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parity());
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional int32 flow_control = 3 [default = 0];
    if (has_flow_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow_control());
    }

    // optional bool is_debug = 7 [default = true];
    if (has_is_debug()) {
      total_size += 1 + 1;
    }

    // optional int32 databits = 4 [default = 8];
    if (has_databits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->databits());
    }

    // optional int32 stopbits = 5 [default = 1];
    if (has_stopbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stopbits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerialPortConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rrts.driver.serial.SerialPortConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialPortConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerialPortConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rrts.driver.serial.SerialPortConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rrts.driver.serial.SerialPortConfig)
    MergeFrom(*source);
  }
}

void SerialPortConfig::MergeFrom(const SerialPortConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rrts.driver.serial.SerialPortConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_port();
      serial_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_port_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_parity();
      parity_.AssignWithDefault(&::rrts::driver::serial::SerialPortConfig::_default_parity_.get(), from.parity_);
    }
    if (cached_has_bits & 0x00000004u) {
      serial_boudrate_ = from.serial_boudrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      flow_control_ = from.flow_control_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_debug_ = from.is_debug_;
    }
    if (cached_has_bits & 0x00000020u) {
      databits_ = from.databits_;
    }
    if (cached_has_bits & 0x00000040u) {
      stopbits_ = from.stopbits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SerialPortConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rrts.driver.serial.SerialPortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialPortConfig::CopyFrom(const SerialPortConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rrts.driver.serial.SerialPortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialPortConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void SerialPortConfig::Swap(SerialPortConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerialPortConfig::InternalSwap(SerialPortConfig* other) {
  using std::swap;
  serial_port_.Swap(&other->serial_port_);
  parity_.Swap(&other->parity_);
  swap(serial_boudrate_, other->serial_boudrate_);
  swap(flow_control_, other->flow_control_);
  swap(is_debug_, other->is_debug_);
  swap(databits_, other->databits_);
  swap(stopbits_, other->stopbits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerialPortConfig::GetMetadata() const {
  protobuf_serial_5fcom_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_serial_5fcom_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serial
}  // namespace driver
}  // namespace rrts
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::rrts::driver::serial::SerialPortConfig* Arena::Create< ::rrts::driver::serial::SerialPortConfig >(Arena* arena) {
  return Arena::CreateInternal< ::rrts::driver::serial::SerialPortConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
